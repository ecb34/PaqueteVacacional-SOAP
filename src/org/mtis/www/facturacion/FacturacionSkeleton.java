
/**
 * FacturacionSkeleton.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.3  Built on : Jun 27, 2015 (11:17:49 BST)
 */
package org.mtis.www.facturacion;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import mysql.Mysql;

/**
 * FacturacionSkeleton java skeleton for the axisService
 */
public class FacturacionSkeleton {

	/**
	 * Auto generated method signature
	 * 
	 * @param crearFactura
	 * @return crearFacturaResponse
	 */

	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	private static void addContent(Document document, String nombre, int unidades, float precio, float precioPaquete)
			throws DocumentException {
		Paragraph content = new Paragraph();
		// We add one empty line
		addEmptyLine(content, 1);
		// Lets write a big header
		content.add(new Paragraph("Paquete contratado"));
		addEmptyLine(content, 2);
		content.add(new Paragraph(nombre + " Precio: " + precioPaquete + "€ Unidades: " + unidades));
		addEmptyLine(content, 1);
		content.add(new Paragraph("Precio Total: " + precio + " €"));
		document.add(content);
	}

	private static void addTitlePage(Document document, int idReserva, String email) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Reserva Paquete Vacacional", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Factura generada el  " + new Date(), smallBold));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Factura asociada a la reserva con ID " + idReserva, smallBold));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Asociada al usuario " + email, smallBold));
		addEmptyLine(preface, 2);
		document.add(preface);

	}

	public org.mtis.www.facturacion.CrearFacturaResponse crearFactura(
			org.mtis.www.facturacion.CrearFactura crearFactura) {

		CrearFacturaResponse response = new CrearFacturaResponse();
		Document document = new Document();
		try {
			Mysql db = new Mysql();
			db.MySQLConnect();
			db.statement = db.connection.createStatement();
			String query = "SELECT id,paquete_id,unidades,email,precio FROM reserva ORDER BY id DESC LIMIT 1";
			db.result = db.statement.executeQuery(query);
			if (db.result.first()) {
				int id = db.result.getInt(1);
				int paquete_id = db.result.getInt(2);
				int unidades = db.result.getInt(3);
				String email = db.result.getString(4);
				float precio = db.result.getFloat(5);

				String pdfName = "../factura_" + id + ".pdf";
				PdfWriter.getInstance(document, new FileOutputStream(pdfName));
				query = String.format("SELECT nombre,precio from paquete where id =%s", paquete_id);
				db.result = db.statement.executeQuery(query);
				String nombrePaquete = "";
				float precioPaquete = -1;
				if (db.result.first()) {
					nombrePaquete = db.result.getString(1);
					precioPaquete = db.result.getFloat(2);
				}
				document.open();
				addTitlePage(document, id, email);
				addContent(document, nombrePaquete, unidades, precio, precioPaquete);
				response.setCreada(true);
			} else {
				response.setCreada(false);
				response.setCodigoError(500);
			}
		} catch (Exception e) {
			response.setCreada(false);
			response.setCodigoError(400);
			e.printStackTrace();
		} finally {
			document.close();
		}

		return response;
	}

}
